version: '2'

services:
#if $pgmaster_ip == $ip
    pgmaster:
        restart: on-failure
        build:
            context: .
            dockerfile: Postgres-latest.Dockerfile
        environment:
            PARTNER_NODES: "pgmaster.host --port $pgmaster_port,pgslave1.host --port $pgslave1_port,pgslave3.host --port $pgslave3_port"
            NODE_ID: 1 # Integer number of node
            NODE_NAME: node1 # Node name
            CLUSTER_NODE_NETWORK_NAME: pgmaster.host # (default: hostname of the node)
            NODE_PRIORITY: 100  # (default: 100)
            SSH_ENABLE: 1
            # database we want to use for application
            POSTGRES_PASSWORD: dino.dev
            POSTGRES_USER: postgres
            POSTGRES_DB: wmc_loyalty
            CLEAN_OVER_REWIND: 0
            CONFIGS: "listen_addresses:'*',max_replication_slots:5"
                                  # in format variable1:value1[,variable2:value2[,...]]
                                  # used for pgpool.conf file
            # defaults:
            CLUSTER_NAME: pg_cluster # default is pg_cluster
            REPLICATION_DB: replication_db # default is replication_db
            REPLICATION_USER: replication_user # default is replication_user
            REPLICATION_PASSWORD: replication_pass # default is replication_pass
            NODE_PORT: $pgmaster_port
            port_pgmaster.host: $pgmaster_port
            port_pgslave1.host: $pgslave1_port
            port_pgslave2.host: $pgslave2_port
            port_pgslave3.host: $pgslave3_port
            port_pgslave4.host: $pgslave4_port
        volumes:
            - pgmaster:/var/lib/postgresql/data
        extra_hosts:
            - "pgmaster.host:${pgmaster_ip}"
            - "pgslave1.host:${pgslave1_ip}"
            - "pgslave2.host:${pgslave2_ip}"
            - "pgslave3.host:${pgslave3_ip}"
            - "pgslave4.host:${pgslave4_ip}"
        expose:
            - $pgmaster_port
        network_mode: host
#end if
#if $pgslave1_ip == $ip
    pgslave1:
        restart: on-failure
        build:
            context: .
            dockerfile: Postgres-latest.Dockerfile
        environment:
            PARTNER_NODES: "pgmaster.host --port $pgmaster_port,pgslave1.host --port $pgslave1_port"
            REPLICATION_PRIMARY_HOST: pgmaster.host
            REPLICATION_PRIMARY_PORT: $pgmaster_port
            NODE_ID: 2
            NODE_NAME: node2
            CLUSTER_NODE_NETWORK_NAME: pgslave1.host # (default: hostname of the node)
            CLEAN_OVER_REWIND: 1
            CONFIGS: "max_replication_slots:10" #some overrides
            NODE_PORT: $pgslave1_port
            port_pgmaster.host: $pgmaster_port
            port_pgslave1.host: $pgslave1_port
            port_pgslave2.host: $pgslave2_port
            port_pgslave3.host: $pgslave3_port
            port_pgslave4.host: $pgslave4_port
        volumes:
            - pgslave1:/var/lib/postgresql/data
        extra_hosts:
            - "pgmaster.host:${pgmaster_ip}"
            - "pgslave1.host:${pgslave1_ip}"
            - "pgslave2.host:${pgslave2_ip}"
            - "pgslave3.host:${pgslave3_ip}"
            - "pgslave4.host:${pgslave4_ip}"
        expose:
            - $pgslave1_port
        network_mode: host
#end if
#if $pgslave2_ip == $ip
    pgslave2:
        restart: on-failure
        build:
            context: .
            dockerfile: Postgres-latest.Dockerfile
        environment:
            REPLICATION_PRIMARY_HOST: pgslave1.host # I want to have cascade Streeming replication
            REPLICATION_PRIMARY_PORT: $pgslave1_port
            NODE_ID: 3
            NODE_NAME: node3
            CLUSTER_NODE_NETWORK_NAME: pgslave2.host # (default: hostname of the node)
            #USE_REPLICATION_SLOTS: 0
            NODE_PORT: $pgslave2_port
            port_pgmaster.host: $pgmaster_port
            port_pgslave1.host: $pgslave1_port
            port_pgslave2.host: $pgslave2_port
            port_pgslave3.host: $pgslave3_port
            port_pgslave4.host: $pgslave4_port
        volumes:
            - pgslave2:/var/lib/postgresql/data
        extra_hosts:
            - "pgmaster.host:${pgmaster_ip}"
            - "pgslave1.host:${pgslave1_ip}"
            - "pgslave2.host:${pgslave2_ip}"
            - "pgslave3.host:${pgslave3_ip}"
            - "pgslave4.host:${pgslave4_ip}"
        expose:
            - $pgslave2_port
        network_mode: host
#end if
#if $pgslave3_ip == $ip
    pgslave3:
        restart: on-failure
        build:
            context: .
            dockerfile: Postgres-latest.Dockerfile
        environment:
            PARTNER_NODES: "pgmaster.host --port $pgmaster_port,pgslave1.host --port $pgslave1_port,pgslave3.host --port $pgslave3_port"
            REPLICATION_PRIMARY_HOST: pgmaster.host
            REPLICATION_PRIMARY_PORT: $pgmaster_port
            NODE_ID: 4
            NODE_NAME: node4
            CLUSTER_NODE_NETWORK_NAME: pgslave3.host # (default: hostname of the node)
            NODE_PRIORITY: 200  # (default: 100)
            CLEAN_OVER_REWIND: 1
            NODE_PORT: $pgslave3_port
            port_pgmaster.host: $pgmaster_port
            port_pgslave1.host: $pgslave1_port
            port_pgslave2.host: $pgslave2_port
            port_pgslave3.host: $pgslave3_port
            port_pgslave4.host: $pgslave4_port
        volumes:
            - pgslave3:/var/lib/postgresql/data
        extra_hosts:
            - "pgmaster.host:${pgmaster_ip}"
            - "pgslave1.host:${pgslave1_ip}"
            - "pgslave2.host:${pgslave2_ip}"
            - "pgslave3.host:${pgslave3_ip}"
            - "pgslave4.host:${pgslave4_ip}"
        expose:
            - $pgslave3_port
        network_mode: host
#end if
#if $pgslave4_ip == $ip
    pgslave4:
        restart: on-failure
        build:
            context: .
            dockerfile: Postgres-latest.Dockerfile
        environment:
            REPLICATION_PRIMARY_HOST: pgslave3.host
            REPLICATION_PRIMARY_PORT: $pgslave3_port
            NODE_ID: 5
            NODE_NAME: node5
            CLUSTER_NODE_NETWORK_NAME: pgslave4.host # (default: hostname of the node)
            #USE_REPLICATION_SLOTS: 0
            NODE_PORT: $pgslave3_port
            port_pgmaster.host: $pgmaster_port
            port_pgslave1.host: $pgslave1_port
            port_pgslave2.host: $pgslave2_port
            port_pgslave3.host: $pgslave3_port
            port_pgslave4.host: $pgslave4_port
        volumes:
            - pgslave4:/var/lib/postgresql/data
        extra_hosts:
            - "pgmaster.host:${pgmaster_ip}"
            - "pgslave1.host:${pgslave1_ip}"
            - "pgslave2.host:${pgslave2_ip}"
            - "pgslave3.host:${pgslave3_ip}"
            - "pgslave4.host:${pgslave4_ip}"
        expose:
            - $pgslave4_port
        network_mode: host
#end if
#if $backup_ip == $ip
    backup:
        build:
            context: .
            dockerfile: Barman-2.2.Dockerfile
        environment:
            REPLICATION_USER: replication_user # default is replication_user
            REPLICATION_PASSWORD: replication_pass # default is replication_pass
            REPLICATION_HOST: pgmaster.host
            REPLICATION_PORT: $pgmaster_port
            POSTGRES_PASSWORD: dino.dev
            POSTGRES_USER: postgres
            POSTGRES_DB: wmc_loyalty
            SSH_ENABLE: 1
            BACKUP_SCHEDULE: "*/30 */5 * * *"
        volumes:
            - backup:/var/backups
        network_mode: host
#end if

volumes:
#if $pgmaster_ip == $ip
    pgmaster:
#end if            
#if $pgslave1_ip == $ip
    pgslave1:
#end if
#if $pgslave2_ip == $ip
    pgslave2:
#end if
#if $pgslave3_ip == $ip
    pgslave3:
#end if
#if $pgslave4_ip == $ip
    pgslave4:
#end if
#if $backup_ip == $ip
    backup:
#end if
